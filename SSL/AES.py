import numpy as np

class AES:
    Sbox = (
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
    )
    InvSbox = (
        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
    )
    Rcon = (
        0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
        0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
        0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39
    )

    def __init__(self, key):#初始函数，生成轮密钥
        key = np.fromstring(key, dtype=np.uint8)
        def RotWord(w):
            w = [w[1], w[2], w[3], w[0]]
            return w
        def SubWord(w, num=0):
            for i in w:
                w[num] = self.Sbox[i]
                num += 1
            return w
        w = [key[0:4], key[4:8], key[8:12], key[12:16]] + [0] * 40
        for i in range(4, 44):
            u = w[i - 1]
            if not i % 4:  # 如果余数是0 W[i]=W[i-4]⨁T(W[i-1])
                u[0] = SubWord(RotWord(u))[0] ^ self.Rcon[i // 4 + 1]  # 左移加字节替换再异或,只异或高位，从1开始
            w[i] = w[i - 4] ^ u  # else W[i]=W[i-4]⨁W[i-1]
        self.key = np.array(w).flatten('F') #

    def pre_process(self, text):
        if len(text) % 16 != 0: #不足16位的补零
            text = text.ljust(16, '0')
        #print('明文:', text)
        text = np.fromstring(text, dtype=np.uint8)#转为ascii
        return text

    def Add_round_key(self, text, i): #轮密钥加
        key = self.key[i:i+16]#加个round啥的
        text = key ^ text
        return text

    def subBytes(self, text, num = 0): #字节代换
        for i in text:
            text[num] = self.Sbox[i]  # hex(97)=0x61为第七行第二列，正好是第97号元素
            num += 1
        return text

    def shiftRow(self, text): #行移位
        text = np.matrix([ #字节矩阵，这一步其实可以省略，但是懒得改了
            [text[0], text[4], text[8], text[12]],#每行四个字节
            [text[1], text[5], text[9], text[13]],
            [text[2], text[6], text[10], text[14]],
            [text[3], text[7], text[11], text[15]]
        ])
        return np.matrix([
            [text[0, 0], text[0, 1], text[0, 2], text[0, 3]],
            [text[1, 1], text[1, 2], text[1, 3], text[1, 0]],
            [text[2, 2], text[2, 3], text[2, 0], text[2, 1]],
            [text[3, 3], text[3, 0], text[3, 1], text[3, 2]]
        ])

    def mix_column(self, text):  # 由乘法分配律依次分解
        # 满足乘法分配律，即03×S=01×S⊕02×S。
        # ×01和普通乘法×1一样，是其本身
        # ×02表示左移一位，最右边补0，若最高位为1，需要将移位后的结果与1B进行异或
        # 0x1B是0b11011  0x80是0b10000000检验第一位是否为1
        xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)# x乘函数
        for i in range(4):
            u = text[0, i]
            A = text[0, i] ^ text[1, i] ^ text[2, i] ^ text[3, i]
            text[0, i] ^= A ^ xtime(text[0, i] ^ text[1, i])
            # 满足乘法分配律，即03×S=01×S⊕02×S。
            # ×01和普通乘法×1一样，是其本身
            # ×02表示左移一位，最右边补0，若最高位为1，需要将移位后的结果与1B进行异或
            # 0x1B是0b11011  0x80是0b10000000检验第一位是否为1
            text[1, i] ^= A ^ xtime(text[1, i] ^ text[2, i])
            text[2, i] ^= A ^ xtime(text[2, i] ^ text[3, i])
            text[3, i] ^= A ^ xtime(text[3, i] ^ u)
        return text

    def invShiftRows(self, text): #行移位
        text = np.matrix([ #字节矩阵，这一步其实可以省略，但是懒得改了
            [text[0], text[4], text[8], text[12]],#每行四个字节
            [text[1], text[5], text[9], text[13]],
            [text[2], text[6], text[10], text[14]],
            [text[3], text[7], text[11], text[15]]
        ])
        return np.matrix([
            [text[0, 0], text[0, 1], text[0, 2], text[0, 3]],
            [text[1, 3], text[1, 0], text[1, 1], text[1, 2]],
            [text[2, 2], text[2, 3], text[2, 0], text[2, 1]],
            [text[3, 1], text[3, 2], text[3, 3], text[3, 0]]
        ])

    def invsubBytes(self, text, num = 0): #字节代换
        for i in text:
            text[num] = self.InvSbox[i]  # hex(97)=0x61为第七行第二列，正好是第97号元素
            num += 1
        return text

    def inv_mix_columns(self, s):  # 逆列混淆矩阵可以拆解，这个运行之后还要再整一次列混合
        s = np.matrix([ #字节矩阵，这一步其实可以省略，但是懒得改了
            [s[0], s[4], s[8], s[12]],#每行四个字节
            [s[1], s[5], s[9], s[13]],
            [s[2], s[6], s[10], s[14]],
            [s[3], s[7], s[11], s[15]]
        ])
        xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)  # x乘函数
        for i in range(4):
            u = xtime(xtime(s[0, i] ^ s[2, i])) #原理同列混合，不赘述了
            v = xtime(xtime(s[1, i] ^ s[3, i]))
            s[0, i] ^= u
            s[1, i] ^= v
            s[2, i] ^= u
            s[3, i] ^= v
        return s

    def encrypt(self, text):
        text = self.pre_process(text)
        text = self.Add_round_key(text, 0)
        for i in range(1, 10): #前九轮
            text = self.subBytes(text)
            text = self.shiftRow(text)
            text = self.mix_column(text)
            text = self.Add_round_key(np.array(text).flatten('F'), i)
        text = self.subBytes(text)
        text = self.shiftRow(text)
        text = self.Add_round_key(np.array(text).flatten('F'), 10)  # 第十轮
        #print('密文：' + ''.join([hex(i)[2:4] for i in text]))  # 看上去是16个字节
        return text

    def decrypt(self, coded):
        coded = self.Add_round_key(np.array(coded).flatten('F'), 10)
        for i in range(1, 10):
            coded = self.invShiftRows(np.array(coded).flatten('F'))
            coded = self.invsubBytes(np.array(coded).flatten('F'))
            coded = self.Add_round_key(coded, 10-i)
            coded = self.inv_mix_columns(coded)
            coded = self.mix_column(coded) #这里将逆列混合拆分为一个矩阵乘法和一次列混合
        coded = self.invShiftRows(np.array(coded).flatten('F'))
        coded = self.invsubBytes(np.array(coded).flatten('F'))
        plaintext = self.Add_round_key(coded, 0)
        return plaintext

    def block_encrypt(self, plaintext): #输出是一个list
        ciphertext = ''
        for i in range(len(plaintext) // 16 + 1):
            #print('分块：', i + 1)
            text = plaintext[16 * i: 16 * (i + 1)]
            coded = self.encrypt(text)
            coded = ''.join([chr(i) for i in coded])
            ciphertext += coded
        return ciphertext

    def block_decrypt(self, ciphertext):
        plaintext = ''
        for i in range(len(ciphertext) // 16):
            #print('分块：', i + 1)
            text = ciphertext[16 * i: 16 * (i + 1)]
            decode = []
            for j in text:
                decode.append(ord(j))
            decode = self.decrypt(decode)
            decode = ''.join([chr(i) for i in decode])
            plaintext += decode
        return plaintext.strip('0')




# if __name__ == '__main__':
#     key = 'abcdefghijklmnop' #必须是16字节
#     plaintext = 'Cryptography and Network Security;2021214265;HuZiXuan'
#     #print('使用密钥', key)
#     #print('输入明文', plaintext)
#
#     aes = AES(key=key)
#     ciphertext = aes.block_encrypt(plaintext)
#     print(ciphertext)
#
#     plaintext = aes.block_decrypt(ciphertext)
#     print(plaintext)



    # AES1 = AES(key=key)
    #
    # out = ''
    # for i in range(len(plaintext) // 16 + 1):
    #     print('分块：', i+1)
    #     text = plaintext[16 * i: 16 * (i + 1)]
    #     coded = AES1.encrypt(text)
    #     coded = ''.join([chr(i) for i in coded])
    #     decode = []
    #     for i in coded:
    #         decode.append(ord(i))
    #
    #     decode = AES1.decrypt(decode)
    #     lsp = ''.join([chr(i) for i in decode])
    #
    #     out += str(lsp)
    # print('\n')
    # print('解密结果：', out.strip('0'))


